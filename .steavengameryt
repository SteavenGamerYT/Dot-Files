# Environment Variables Setup
# Setting up environment variables for user data, config, state, cache, and custom directories
export XDG_DATA_HOME="$HOME/.local/share"  # Directory for user-specific data files
export XDG_CONFIG_HOME="$HOME/.config"  # Directory for user-specific configuration files
export XDG_STATE_HOME="$HOME/.local/state"  # Directory for user-specific state files
export XDG_CACHE_HOME="$HOME/.cache"  # Directory for user-specific non-essential data files
export DOT_FOLDER="$HOME/.dot-folders"  # Directory for storing dot files and folders
export ANDROID_HOME="$DOT_FOLDER/android"  # Android SDK directory
export WINEPREFIX="$DOT_FOLDER/wine"  # Wine configuration and data directory
export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=$DOT_FOLDER/java"  # Java preferences directory
export CUDA_CACHE_PATH="$XDG_CACHE_HOME/nv"  # CUDA cache directory
export GTK2_RC_FILES="$XDG_CONFIG_HOME/gtk-2.0/gtkrc"  # GTK2 configuration file
export XDG_SCREENSHOTS_DIR="$HOME/Pictures/Screenshots"  # Directory for storing screenshots
export TERM="xterm-256color"  # Terminal type to support 256 colors
export EDITOR=nano  # Default text editor

# Path Customization
# This loop adds specified directories to the PATH if they exist
for dir in "$HOME/.bin" "$HOME/.local/bin" "$HOME/Applications" "/var/lib/flatpak/exports/bin" "$HOME/.spicetify" "/home/linuxbrew/.linuxbrew/bin"; do
  [ -d "$dir" ] && PATH="$dir:$PATH"  # Add directory to PATH if it exists
done

# Aliases Setup
# Define aliases for system operations, file handling, and application shortcuts
alias wget='wget --hsts-file="$XDG_DATA_HOME/wget-hsts"'  # wget with HSTS file support
alias ll='ls -all --color=auto -h'  # List detailed directory contents with human-readable sizes and colors
alias cp='cp -i'  # Copy files with prompt before overwrite
alias mv='mv -i'  # Move files with prompt before overwrite
alias rm='trash -v'  # Use 'trash' instead of 'rm' for safer file deletion
alias mkdir='mkdir -p'  # Make parent directories as needed
alias ps='ps auxf'  # Process status with user-oriented format
alias ping='ping -c 10'  # Send 10 echo requests to network hosts
alias less='less -R'  # View file contents with raw control characters
alias cls='clear && colorscript -r'  # Clear the screen and run a random color script
alias clear='/bin/clear && colorscript -r'  # Clear the screen and run a random color script
alias multitail='multitail --no-repeat -c'  # View multiple log files in a single window
alias freshclam='sudo freshclam'  # Update ClamAV virus databases with superuser privileges
alias vi='nvim -u ~/Documents/GitHub/dot-files/vim-nano/nano.vim'  # Use Neovim with a specific configuration
alias svi='sudo vi'  # Open vi with superuser privileges
alias vis='nvim -u ~/Documents/GitHub/dot-files/vim-nano/nano.vim "+set si"'  # Use Neovim with specific settings
alias vim='nvim -u ~/Documents/GitHub/dot-files/vim-nano/nano.vim'  # Use Neovim with a specific configuration
alias mktar='tar -cvf'  # Create a tar archive
alias mkbz2='tar -cvjf'  # Create a bzip2-compressed tar archive
alias mkgz='tar -cvzf'  # Create a gzip-compressed tar archive
alias untar='tar -xvf'  # Extract files from a tar archive
alias unbz2='tar -xvjf'  # Extract files from a bzip2-compressed tar archive
alias ungz='tar -xvzf'  # Extract files from a gzip-compressed tar archive
alias h='history'  # Display command history
alias hs='history | grep'  # Search command history
alias hsi='history | grep -i'  # Case-insensitive search of command history
alias pbcopy='xclip -selection clipboard'  # Copy to clipboard
alias pbpaste='xclip -selection clipboard -o'  # Paste from clipboard
alias copydir='pwd | tr -d "\r\n" | pbcopy'  # Copy current directory path to clipboard
alias gedit='gnome-text-editor'  # Shortcut for GNOME text editor
alias sudo-gedit='sudo gnome-text-editor'  # Open GNOME text editor with superuser privileges
alias neofetch='/bin/neowofetch'  # Run Neofetch with custom path
alias neofetch-big='/bin/neowofetch --ascii ~/.config/neofetch/cat.txt | lolcat'  # Display large ASCII art with colors
alias neofetch-small='/bin/neowofetch --ascii ~/.config/neofetch/cat2.txt | lolcat'  # Display small ASCII art with colors
alias neofetch-big2='/bin/neowofetch --ascii ~/.config/neofetch/steaven.txt | lolcat'  # Display custom ASCII art with colors
alias neofetch-small2='/bin/neowofetch --ascii ~/.config/neofetch/steaven2.txt | lolcat'  # Display custom ASCII art with colors
alias neofetch-art='/bin/neowofetch --caca ~/.config/neofetch/Toad_Artwork_-_Super_Mario_3D_World.png'  # Display image as ASCII art
alias neofetch-image='/bin/neowofetch --sixel ~/.config/neofetch/Toad_Artwork_-_Super_Mario_3D_World.png | lolcat'  # Display image with colors
alias antivirus-update='freshclam'  # Alias for updating antivirus databases
alias looking-glass-opengl='looking-glass-client -m 97 -g OpenGL'  # Run Looking Glass client with OpenGL
alias looking-glass-egl='looking-glass-client -m 97 -g EGL'  # Run Looking Glass client with EGL
alias gpulinux='supergfxctl -m Hybrid && logout'  # Switch to hybrid graphics mode and logout
alias gpudis='supergfxctl -m Integrated && logout'  # Switch to integrated graphics mode and logout
alias gpuwindows='supergfxctl -m Vfio'  # Switch to VFIO graphics mode
alias yta-aac="yt-dlp --extract-audio --audio-format aac --embed-metadata --embed-thumbnail "  # Extract AAC audio from video
alias yta-best="yt-dlp --extract-audio --audio-format best --embed-metadata --embed-thumbnail "  # Extract best quality audio from video
alias yta-flac="yt-dlp --extract-audio --audio-format flac --embed-metadata --embed-thumbnail "  # Extract FLAC audio from video
alias yta-m4a="yt-dlp --extract-audio --audio-format m4a --embed-metadata --embed-thumbnail "  # Extract M4A audio from video
alias yta-mp3="yt-dlp --extract-audio --audio-format mp3 --embed-metadata --embed-thumbnail "  # Extract MP3 audio from video
alias yta-opus="yt-dlp --extract-audio --audio-format opus --embed-metadata --embed-thumbnail "  # Extract Opus audio from video
alias yta-vorbis="yt-dlp --extract-audio --audio-format vorbis --embed-metadata --embed-thumbnail "  # Extract Vorbis audio from video
alias yta-wav="yt-dlp --extract-audio --audio-format wav --embed-metadata --embed-thumbnail "  # Extract WAV audio from video
alias ytv-best="yt-dlp -f bestvideo+bestaudio --embed-metadata --embed-thumbnail --embed-chapters --audio-multistreams"  # Download best quality video and audio
alias ytv-best-mp4='yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --embed-metadata --embed-thumbnail --embed-chapters --audio-multistreams'  # Download best MP4 video and audio
alias ytv-best-mp4-1080p='yt-dlp -f "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --embed-metadata --embed-thumbnail --embed-chapters'  # Download 1080p MP4 video and audio
alias ytv-best-audio="yt-dlp -f bestvideo+bestaudio --embed-metadata --embed-thumbnail --embed-chapters --merge-output-format mkv"  # Download best video and audio in MKV format
alias playavi='vlc *.avi'  # Play AVI files with VLC
alias playmov='vlc *.mov'  # Play MOV files with VLC
alias playmp4='vlc *.mp4'  # Play MP4 files with VLC
alias df='df -h'  # Display disk space usage in human-readable format
alias free='free -m'  # Display memory usage in MB
alias udo='sudo'  # Alias for sudo
alias grep='grep --color=auto'  # Grep with colored output
alias egrep='egrep --color=auto'  # Extended grep with colored output
alias fgrep='fgrep --color=auto'  # Fixed-string grep with colored output
alias openports='netstat -nape --inet'  # Display open network ports
alias rebootsafe='sudo shutdown -r now'  # Safely reboot the system
alias rebootforce='sudo shutdown -r -n now'  # Forcefully reboot the system
alias gp='gitpush'  # Alias for gitpush function
alias gu='gitupdate'  # Alias for gitupdate function
alias gpush='git-push'  # Alias for git-push function
alias gcommit='gitcommit'  # Alias for gitcommit function
alias cdgitf='z ~/Documents/GitHub'  # Change directory to GitHub folder
alias cddot='z ~/Documents/GitHub/dot-files'  # Change directory to dot-files folder
alias web='z /var/www/html'  # Change directory to web server root
alias home='z ~'  # Change directory to home
alias bd='cd "$OLDPWD"'  # Go back to the previous directory
alias f="find . | grep "  # Find files and directories matching a pattern
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"  # Count files, links, and directories
alias checkcommand="type -t"  # Check if a command exists
alias diskspace="du -S -h | sort -n -r |more"  # Display disk space used by directories
alias folders='du -h --max-depth=1'  # Display disk space used by folders in the current directory
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'  # Sort folders by size
alias tree='tree -CAhF --dirsfirst'  # Display directory tree with color and file attributes
alias treed='tree -CAFd'  # Display directory tree with color and only directories
alias mountedinfo='df -hT'  # Display mounted file systems with human-readable sizes and types
alias xwayland-apps='xlsclients'  # List XWayland clients
alias watch-xwayland-apps='watch xlsclients'  # Monitor XWayland clients
alias pacman='sudo pacman'  # Run pacman with superuser privileges
alias pacsyu='sudo pacman -Syu'  # Update system packages using pacman
alias pacsyyu='sudo pacman -Syyu'  # Refresh package databases and update system packages using pacman
alias yaysua='yay -Sua --noconfirm'  # Update AUR packages using yay without confirmation
alias yaysyu='yay -Syu --noconfirm'  # Update system and AUR packages using yay without confirmation
alias parsua='paru -Sua --noconfirm'  # Update AUR packages using paru without confirmation
alias parsyu='paru -Syu --noconfirm'  # Update system and AUR packages using paru without confirmation
alias unlock='sudo rm /var/lib/pacman/db.lck'  # Remove the lock file for pacman
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'  # Remove orphaned packages using pacman
alias theme-flatpak='~/Documents/GitHub/dot-files/flatpak/stylepak install-system'  # Install system-wide flatpak themes
alias flatpak-update-font-cache='~/Documents/GitHub/dot-files/flatpak/flatpak-font.sh'  # Update font cache for flatpak
alias cat='batcat'  # Use batcat instead of cat for syntax highlighting
# Audio Management
# Aliases for managing audio combining and uncombining
alias combine-audio='pactl load-module module-combine-sink'  # Load the module for combining audio streams
alias uncombine-audio='pactl unload-module module-combine-sink'  # Unload the module for combining audio streams

# Functions
# Define functions for git operations and system updates
gitpush() {
    git add .  # Add all changes to staging
    git commit -m "$*"  # Commit changes with a message
    git pull  # Pull latest changes from remote
    git push  # Push changes to remote
}

gitupdate() {
    eval "$(ssh-agent -s)"  # Start the SSH agent
    ssh-add ~/.ssh/github  # Add SSH key for GitHub
    ssh -T git@github.com  # Test SSH connection to GitHub
}

git-push() {
    git add .  # Add all changes to staging
    git commit -m "$1"  # Commit changes with a message
    git push  # Push changes to remote
}

gitcommit() {
    git add .  # Add all changes to staging
    git commit -m "$1"  # Commit changes with a message
}

cdgit() {
    z ~/Documents/GitHub/"$1"  # Change directory to a specific GitHub repository
}

bash_in_konsole() {
  local IFS
  konsole -e bash --rcfile <(printf '. ~/.bashrc; set -m; %s\n' "$*")  # Open a new Konsole window with a custom bash session
}

ix() {
  local file="$1"
  curl -F "f:1=@$file" ix.io  # Upload a file to ix.io
}

0x0() {
  curl -F "file=@$1" https://0x0.st  # Upload a file to 0x0.st
}

stv-install() {
    if [[ $1 == "-v" ]]; then
        x=$@
        if [[ $2 == "arch" ]]; then
            x=${x/-v arch/}
            distrobox-enter -H arch -- sudo pacman $x  # Install packages in Arch distrobox
        elif [[ $2 == "ubuntu" ]]; then
            x=${x/-v ubuntu/}
            distrobox-enter -H ubuntu -- sudo apt $x  # Install packages in Ubuntu distrobox
        elif [[ $2 == "fedora" ]]; then
            x=${x/-v fedora/}
            distrobox-enter -H fedora -- sudo dnf $x  # Install packages in Fedora distrobox
        elif [[ $2 == "opensuse" ]]; then
            x=${x/-v opensuse/}
            distrobox-enter -H opensuse -- sudo zypper $x  # Install packages in openSUSE distrobox
        else
            echo "Command Not Found"
        fi
    fi
}

stv() {
    if [[ $1 == "-v" ]]; then
        x=$@
        if [[ $2 == "arch" ]]; then
            x=${x/-v arch/}
            distrobox-enter -H arch $x  # Enter Arch distrobox
        elif [[ $2 == "ubuntu" ]]; then
            x=${x/-v ubuntu/}
            distrobox-enter -H ubuntu -- $x  # Enter Ubuntu distrobox
        elif [[ $2 == "fedora" ]]; then
            x=${x/-v fedora/}
            distrobox-enter -H fedora -- $x  # Enter Fedora distrobox
        elif [[ $2 == "opensuse" ]]; then
            x=${x/-v opensuse/}
            distrobox-enter -H opensuse -- $x  # Enter openSUSE distrobox
        else
            echo "Command Not Found"
        fi
    fi
}

# Define commands to update Arch-based systems and Flatpak applications
updatearch="yay -Syu --noconfirm --needed && sudo flatpak update -y"

# Define commands to update Fedora-based systems and Flatpak applications
updatefedora="sudo dnf update -y && sudo flatpak update -y"

# Define commands to update Debian-based systems using Nala and Flatpak applications
updatedebian="sudo nala upgrade -y && sudo flatpak update -y"

# Define command to update dotfiles from a Git repository
dotfiles='cd ~/Documents/GitHub/dot-files && git pull && cd'

# Create an alias to update all specified systems via SSH, executing the update commands remotely
alias update-all="ssh -t omar-pc '${updatearch}' && ssh -t omar-gaminglaptop '${updatearch}'"  # Remotely update both omar-pc and omar-gaminglaptop using Arch update commands

# Create an alias to update dotfiles on all specified systems via SSH, executing the dotfiles update commands remotely
alias update-dotfiles="ssh -t omar-pc '${dotfiles}' && ssh -t omar-gaminglaptop '${dotfiles}'"  # Remotely update dotfiles on both omar-pc and omar-gaminglaptop